
# Repository
trigger:
  branches:
    include:
      - main
      #- develop
  paths:
    exclude:
      - README.md
      - docs/**


# Definizioni delle variabli globali
variables:
  buildConfiguration: 'Release'
  dotnetVersion: '9.0.x'
  buildPlatform: 'Any CPU'
  solutionPath: '**/*.sln'
  #testResultsDirectory: '$(Build.SourcesDirectory)/TestResults'
  artifactName: 'drop'
  vmImageName: 'windows-latest'

# Definizione variabili per ambiente target
  group: 'Production-Variables'
  appName: 'WebAppTest'
  deploymentPath: 'C:\inetpub\wwwroot\${appName}'


# Stages (Fasi)
stages:

  # STAGE 1 BUILD & TEST
  - stage: Build
    displayName: 'Build And Test Stage'
    
    jobs:
      
      - job: BuildJob
        displayName: 'Build Job'
        pool:
          vmImage: $(vmImageName)
        #variables:
        #  buildConfiguration: $(buildConfiguration)
        steps:
          # Checkout del codice sorgente
          - checkout: self
            displayName: 'Checkout Code'
          
          # Setup .Net Core SDK
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: $(dotnetVersion)
              #installationPath: $(Agent.ToolsDirectory)/dotnet
              includePreviewVersions: false

          # Restore NuGet packages
          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet packages'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              #arguments: '--configuration $(buildConfiguration) --no-restore'
              workingDirectory: '$(Build.SourcesDirectory)'
              feedsToUse: 'select'
              verbosityRestore: 'Detailed' # 'Minimal', 'Normal', 'Detailed', 'Diagnostic'
              
          # Build dell'app
          - task: DotNetCoreCLI@2
            displayName: 'Build Application'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              workingDirectory: '$(Build.SourcesDirectory)'
          
          # Esecuzione Unit Tests
          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: '**/*Tests.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --logger trx'
              publishTestResults: true
          
           # Pubblicazione dei risultati dei test
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              buildConfiguration: $(buildConfiguration)
            condition: always()
          
          # Pubblicazione della coverage
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
            condition: always()

          # Publish Application
          - task: DotNetCoreCLI@2
            displayName: 'Publish Application'
            inputs:
              command: 'publish'
              projects: '**/*.csproj'
              #arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(appName) --no-build'
              workingDirectory: '$(Build.SourcesDirectory)'
              publishWebProjects: true
              modifyOutputPath: false
              zipAfterPublish: false
            
          - task: CopyFiles@2
            displayName: 'Copy Deployments Scripts'
            inputs:
              SourceFolder: '$(Build.ArtifactStagingDirectory)/DevOps'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/scripts'
              CleanTargetFolder: true
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
          
           # Pubblicazione degli artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: $(artifactName)
              publishLocation: 'Container'

  # STAGE 2 DEPLOYMENT su STAGING            
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Staging VM'
        environment: 'Staging'
        pool:
          vmImage: $(vmImageName)
        
        variables:
          - group: 'Staging-Variables'
        
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deployment-steps.yml
                  parameters:
                    environmentName: 'Staging'
                    targetMachine: '$(stagingVM)'
                    deploymentPath: '$(stagingDeploymentPath)'              

  # STAGE 3: DEPLOYMENT SU PRODUCTION
  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production VM'
        environment: 'Production'
        pool:
          vmImage: $(vmImageName)
        
        variables:
          - group: 'Production-Variables'
        
        strategy:
          runOnce:
            deploy:
              steps:
                - template: deployment-steps.yml
                  parameters:
                    environmentName: 'Production'
                    targetMachine: '$(productionVM)'
                    deploymentPath: '$(productionDeploymentPath)'